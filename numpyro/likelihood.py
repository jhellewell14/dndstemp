import argparse
import os

import numpy as np
from jax import jit
import jax.numpy as jnp
from jax.scipy.special import logsumexp
from jax.lax import lgamma, dynamic_update_slice_in_dim, dynamic_slice_in_dim

@jit
def build_GTR(alpha, beta, gamma, delta, epsilon, eta, omega, pimat, pimult):
    M = jnp.zeros((61, 61))

    M.at[1,2].set(eta)
    M = M.at[1,3].set(gamma * omega)
    M = M.at[1,4].set(epsilon * omega)
    M = M.at[1,5].set(eta * omega)
    M = M.at[1,9].set(gamma * omega)
    M = M.at[1,11].set(epsilon * omega)
    M = M.at[1,14].set(eta * omega)
    M = M.at[1,30].set(gamma * omega)
    M = M.at[1,46].set(epsilon * omega)
    M = M.at[2,1].set(eta)
    M = M.at[2,3].set(beta * omega)
    M = M.at[2,4].set(delta * omega)
    M = M.at[2,6].set(eta * omega)
    M = M.at[2,10].set(gamma * omega)
    M = M.at[2,12].set(epsilon * omega)
    M = M.at[2,15].set(eta * omega)
    M = M.at[2,31].set(gamma * omega)
    M = M.at[2,47].set(epsilon * omega)
    M = M.at[3,1].set(gamma * omega)
    M = M.at[3,2].set(beta * omega)
    M = M.at[3,4].set(alpha)
    M = M.at[3,7].set(eta * omega)
    M = M.at[3,16].set(eta)
    M = M.at[3,32].set(gamma * omega)
    M = M.at[3,48].set(epsilon * omega)
    M = M.at[4,1].set(epsilon * omega)
    M = M.at[4,2].set(delta * omega)
    M = M.at[4,3].set(alpha)
    M = M.at[4,8].set(eta * omega)
    M = M.at[4,13].set(epsilon * omega)
    M = M.at[4,17].set(eta)
    M = M.at[4,33].set(gamma * omega)
    M = M.at[4,49].set(epsilon * omega)
    M = M.at[5,1].set(eta * omega)
    M = M.at[5,6].set(eta)
    M = M.at[5,7].set(gamma)
    M = M.at[5,8].set(epsilon)
    M = M.at[5,9].set(beta * omega)
    M = M.at[5,11].set(delta * omega)
    M = M.at[5,18].set(eta * omega)
    M = M.at[5,34].set(gamma * omega)
    M = M.at[5,50].set(epsilon * omega)
    M = M.at[6,2].set(eta * omega)
    M = M.at[6,5].set(eta)
    M = M.at[6,7].set(beta)
    M = M.at[6,8].set(delta)
    M = M.at[6,10].set(beta * omega)
    M = M.at[6,12].set(delta * omega)
    M = M.at[6,19].set(eta * omega)
    M = M.at[6,35].set(gamma * omega)
    M = M.at[6,51].set(epsilon * omega)
    M = M.at[7,3].set(eta * omega)
    M = M.at[7,5].set(gamma)
    M = M.at[7,6].set(beta)
    M = M.at[7,8].set(alpha)
    M = M.at[7,20].set(eta * omega)
    M = M.at[7,36].set(gamma * omega)
    M = M.at[7,52].set(epsilon * omega)
    M = M.at[8,4].set(eta * omega)
    M = M.at[8,5].set(epsilon)
    M = M.at[8,6].set(delta)
    M = M.at[8,7].set(alpha)
    M = M.at[8,13].set(delta * omega)
    M = M.at[8,21].set(eta * omega)
    M = M.at[8,37].set(gamma * omega)
    M = M.at[8,53].set(epsilon * omega)
    M = M.at[9,1].set(gamma * omega)
    M = M.at[9,5].set(beta * omega)
    M = M.at[9,10].set(eta)
    M = M.at[9,11].set(alpha * omega)
    M = M.at[9,22].set(eta * omega)
    M = M.at[9,38].set(gamma * omega)
    M = M.at[9,54].set(epsilon * omega)
    M = M.at[10,2].set(gamma * omega)
    M = M.at[10,6].set(beta * omega)
    M = M.at[10,9].set(eta)
    M = M.at[10,12].set(alpha * omega)
    M = M.at[10,23].set(eta * omega)
    M = M.at[10,39].set(gamma * omega)
    M = M.at[10,55].set(epsilon * omega)
    M = M.at[11,1].set(epsilon * omega)
    M = M.at[11,5].set(delta * omega)
    M = M.at[11,9].set(alpha * omega)
    M = M.at[11,12].set(eta)
    M = M.at[11,13].set(epsilon * omega)
    M = M.at[11,26].set(eta * omega)
    M = M.at[11,42].set(gamma * omega)
    M = M.at[11,58].set(epsilon * omega)
    M = M.at[12,2].set(epsilon * omega)
    M = M.at[12,6].set(delta * omega)
    M = M.at[12,10].set(alpha * omega)
    M = M.at[12,11].set(eta)
    M = M.at[12,13].set(delta * omega)
    M = M.at[12,27].set(eta * omega)
    M = M.at[12,43].set(gamma * omega)
    M = M.at[12,59].set(epsilon * omega)
    M = M.at[13,4].set(epsilon * omega)
    M = M.at[13,8].set(delta * omega)
    M = M.at[13,11].set(epsilon * omega)
    M = M.at[13,12].set(delta * omega)
    M = M.at[13,29].set(eta * omega)
    M = M.at[13,45].set(gamma * omega)
    M = M.at[13,61].set(epsilon * omega)
    M = M.at[14,1].set(eta * omega)
    M = M.at[14,15].set(eta)
    M = M.at[14,16].set(gamma)
    M = M.at[14,17].set(epsilon)
    M = M.at[14,18].set(eta * omega)
    M = M.at[14,22].set(gamma * omega)
    M = M.at[14,26].set(epsilon * omega)
    M = M.at[14,30].set(beta * omega)
    M = M.at[14,46].set(delta * omega)
    M = M.at[15,2].set(eta * omega)
    M = M.at[15,14].set(eta)
    M = M.at[15,16].set(beta)
    M = M.at[15,17].set(delta)
    M = M.at[15,19].set(eta * omega)
    M = M.at[15,23].set(gamma * omega)
    M = M.at[15,27].set(epsilon * omega)
    M = M.at[15,31].set(beta * omega)
    M = M.at[15,47].set(delta * omega)
    M = M.at[16,3].set(eta)
    M = M.at[16,14].set(gamma)
    M = M.at[16,15].set(beta)
    M = M.at[16,17].set(alpha)
    M = M.at[16,20].set(eta * omega)
    M = M.at[16,24].set(gamma * omega)
    M = M.at[16,28].set(epsilon * omega)
    M = M.at[16,32].set(beta * omega)
    M = M.at[16,48].set(delta * omega)
    M = M.at[17,4].set(eta)
    M = M.at[17,14].set(epsilon)
    M = M.at[17,15].set(delta)
    M = M.at[17,16].set(alpha)
    M = M.at[17,21].set(eta * omega)
    M = M.at[17,25].set(gamma * omega)
    M = M.at[17,29].set(epsilon * omega)
    M = M.at[17,33].set(beta * omega)
    M = M.at[17,49].set(delta * omega)
    M = M.at[18,5].set(eta * omega)
    M = M.at[18,14].set(eta * omega)
    M = M.at[18,19].set(eta)
    M = M.at[18,20].set(gamma)
    M = M.at[18,21].set(epsilon)
    M = M.at[18,22].set(beta * omega)
    M = M.at[18,26].set(delta * omega)
    M = M.at[18,34].set(beta * omega)
    M = M.at[18,50].set(delta * omega)
    M = M.at[19,6].set(eta * omega)
    M = M.at[19,15].set(eta * omega)
    M = M.at[19,18].set(eta)
    M = M.at[19,20].set(beta)
    M = M.at[19,21].set(delta)
    M = M.at[19,23].set(beta * omega)
    M = M.at[19,27].set(delta * omega)
    M = M.at[19,35].set(beta * omega)
    M = M.at[19,51].set(delta * omega)
    M = M.at[20,7].set(eta * omega)
    M = M.at[20,16].set(eta * omega)
    M = M.at[20,18].set(gamma)
    M = M.at[20,19].set(beta)
    M = M.at[20,21].set(alpha)
    M = M.at[20,24].set(beta * omega)
    M = M.at[20,28].set(delta * omega)
    M = M.at[20,36].set(beta * omega)
    M = M.at[20,52].set(delta * omega)
    M = M.at[21,8].set(eta * omega)
    M = M.at[21,17].set(eta * omega)
    M = M.at[21,18].set(epsilon)
    M = M.at[21,19].set(delta)
    M = M.at[21,20].set(alpha)
    M = M.at[21,25].set(beta * omega)
    M = M.at[21,29].set(delta * omega)
    M = M.at[21,37].set(beta * omega)
    M = M.at[21,53].set(delta * omega)
    M = M.at[22,9].set(eta * omega)
    M = M.at[22,14].set(gamma * omega)
    M = M.at[22,18].set(beta * omega)
    M = M.at[22,23].set(eta)
    M = M.at[22,24].set(gamma * omega)
    M = M.at[22,25].set(epsilon * omega)
    M = M.at[22,26].set(alpha * omega)
    M = M.at[22,38].set(beta * omega)
    M = M.at[22,54].set(delta * omega)
    M = M.at[23,10].set(eta * omega)
    M = M.at[23,15].set(gamma * omega)
    M = M.at[23,19].set(beta * omega)
    M = M.at[23,22].set(eta)
    M = M.at[23,24].set(beta * omega)
    M = M.at[23,25].set(delta * omega)
    M = M.at[23,27].set(alpha * omega)
    M = M.at[23,39].set(beta * omega)
    M = M.at[23,55].set(delta * omega)
    M = M.at[24,16].set(gamma * omega)
    M = M.at[24,20].set(beta * omega)
    M = M.at[24,22].set(gamma * omega)
    M = M.at[24,23].set(beta * omega)
    M = M.at[24,25].set(alpha)
    M = M.at[24,28].set(alpha * omega)
    M = M.at[24,40].set(beta * omega)
    M = M.at[24,56].set(delta * omega)
    M = M.at[25,17].set(gamma * omega)
    M = M.at[25,21].set(beta * omega)
    M = M.at[25,22].set(epsilon * omega)
    M = M.at[25,23].set(delta * omega)
    M = M.at[25,24].set(alpha)
    M = M.at[25,29].set(alpha * omega)
    M = M.at[25,41].set(beta * omega)
    M = M.at[25,57].set(delta * omega)
    M = M.at[26,11].set(eta * omega)
    M = M.at[26,14].set(epsilon * omega)
    M = M.at[26,18].set(delta * omega)
    M = M.at[26,22].set(alpha * omega)
    M = M.at[26,27].set(eta)
    M = M.at[26,28].set(gamma)
    M = M.at[26,29].set(epsilon)
    M = M.at[26,42].set(beta * omega)
    M = M.at[26,58].set(delta * omega)
    M = M.at[27,12].set(eta * omega)
    M = M.at[27,15].set(epsilon * omega)
    M = M.at[27,19].set(delta * omega)
    M = M.at[27,23].set(alpha * omega)
    M = M.at[27,26].set(eta)
    M = M.at[27,28].set(beta)
    M = M.at[27,29].set(delta)
    M = M.at[27,43].set(beta * omega)
    M = M.at[27,59].set(delta * omega)
    M = M.at[28,16].set(epsilon * omega)
    M = M.at[28,20].set(delta * omega)
    M = M.at[28,24].set(alpha * omega)
    M = M.at[28,26].set(gamma)
    M = M.at[28,27].set(beta)
    M = M.at[28,29].set(alpha)
    M = M.at[28,44].set(beta)
    M = M.at[28,60].set(delta * omega)
    M = M.at[29,13].set(eta * omega)
    M = M.at[29,17].set(epsilon * omega)
    M = M.at[29,21].set(delta * omega)
    M = M.at[29,25].set(alpha * omega)
    M = M.at[29,26].set(epsilon)
    M = M.at[29,27].set(delta)
    M = M.at[29,28].set(alpha)
    M = M.at[29,45].set(beta)
    M = M.at[29,61].set(delta * omega)
    M = M.at[30,1].set(gamma * omega)
    M = M.at[30,14].set(beta * omega)
    M = M.at[30,31].set(eta)
    M = M.at[30,32].set(gamma)
    M = M.at[30,33].set(epsilon * omega)
    M = M.at[30,34].set(eta * omega)
    M = M.at[30,38].set(gamma * omega)
    M = M.at[30,42].set(epsilon * omega)
    M = M.at[30,46].set(alpha * omega)
    M = M.at[31,2].set(gamma * omega)
    M = M.at[31,15].set(beta * omega)
    M = M.at[31,30].set(eta)
    M = M.at[31,32].set(beta)
    M = M.at[31,33].set(delta * omega)
    M = M.at[31,35].set(eta * omega)
    M = M.at[31,39].set(gamma * omega)
    M = M.at[31,43].set(epsilon * omega)
    M = M.at[31,47].set(alpha * omega)
    M = M.at[32,3].set(gamma * omega)
    M = M.at[32,16].set(beta * omega)
    M = M.at[32,30].set(gamma)
    M = M.at[32,31].set(beta)
    M = M.at[32,33].set(alpha * omega)
    M = M.at[32,36].set(eta * omega)
    M = M.at[32,40].set(gamma * omega)
    M = M.at[32,44].set(epsilon * omega)
    M = M.at[32,48].set(alpha * omega)
    M = M.at[33,4].set(gamma * omega)
    M = M.at[33,17].set(beta * omega)
    M = M.at[33,30].set(epsilon * omega)
    M = M.at[33,31].set(delta * omega)
    M = M.at[33,32].set(alpha * omega)
    M = M.at[33,37].set(eta * omega)
    M = M.at[33,41].set(gamma * omega)
    M = M.at[33,45].set(epsilon * omega)
    M = M.at[33,49].set(alpha * omega)
    M = M.at[34,5].set(gamma * omega)
    M = M.at[34,18].set(beta * omega)
    M = M.at[34,30].set(eta * omega)
    M = M.at[34,35].set(eta)
    M = M.at[34,36].set(gamma)
    M = M.at[34,37].set(epsilon)
    M = M.at[34,38].set(beta * omega)
    M = M.at[34,42].set(delta * omega)
    M = M.at[34,50].set(alpha * omega)
    M = M.at[35,6].set(gamma * omega)
    M = M.at[35,19].set(beta * omega)
    M = M.at[35,31].set(eta * omega)
    M = M.at[35,34].set(eta)
    M = M.at[35,36].set(beta)
    M = M.at[35,37].set(delta)
    M = M.at[35,39].set(beta * omega)
    M = M.at[35,43].set(delta * omega)
    M = M.at[35,51].set(alpha * omega)
    M = M.at[36,7].set(gamma * omega)
    M = M.at[36,20].set(beta * omega)
    M = M.at[36,32].set(eta * omega)
    M = M.at[36,34].set(gamma)
    M = M.at[36,35].set(beta)
    M = M.at[36,37].set(alpha)
    M = M.at[36,40].set(beta * omega)
    M = M.at[36,44].set(delta * omega)
    M = M.at[36,52].set(alpha * omega)
    M = M.at[37,8].set(gamma * omega)
    M = M.at[37,21].set(beta * omega)
    M = M.at[37,33].set(eta * omega)
    M = M.at[37,34].set(epsilon)
    M = M.at[37,35].set(delta)
    M = M.at[37,36].set(alpha)
    M = M.at[37,41].set(beta * omega)
    M = M.at[37,45].set(delta * omega)
    M = M.at[37,53].set(alpha * omega)
    M = M.at[38,9].set(gamma * omega)
    M = M.at[38,22].set(beta * omega)
    M = M.at[38,30].set(gamma * omega)
    M = M.at[38,34].set(beta * omega)
    M = M.at[38,39].set(eta)
    M = M.at[38,40].set(gamma * omega)
    M = M.at[38,41].set(epsilon * omega)
    M = M.at[38,42].set(alpha * omega)
    M = M.at[38,54].set(alpha * omega)
    M = M.at[39,10].set(gamma * omega)
    M = M.at[39,23].set(beta * omega)
    M = M.at[39,31].set(gamma * omega)
    M = M.at[39,35].set(beta * omega)
    M = M.at[39,38].set(eta)
    M = M.at[39,40].set(beta * omega)
    M = M.at[39,41].set(delta * omega)
    M = M.at[39,43].set(alpha * omega)
    M = M.at[39,55].set(alpha * omega)
    M = M.at[40,24].set(beta * omega)
    M = M.at[40,32].set(gamma * omega)
    M = M.at[40,36].set(beta * omega)
    M = M.at[40,38].set(gamma * omega)
    M = M.at[40,39].set(beta * omega)
    M = M.at[40,41].set(alpha)
    M = M.at[40,44].set(alpha * omega)
    M = M.at[40,56].set(alpha * omega)
    M = M.at[41,25].set(beta * omega)
    M = M.at[41,33].set(gamma * omega)
    M = M.at[41,37].set(beta * omega)
    M = M.at[41,38].set(epsilon * omega)
    M = M.at[41,39].set(delta * omega)
    M = M.at[41,40].set(alpha)
    M = M.at[41,45].set(alpha * omega)
    M = M.at[41,57].set(alpha * omega)
    M = M.at[42,11].set(gamma * omega)
    M = M.at[42,26].set(beta * omega)
    M = M.at[42,30].set(epsilon * omega)
    M = M.at[42,34].set(delta * omega)
    M = M.at[42,38].set(alpha * omega)
    M = M.at[42,43].set(eta)
    M = M.at[42,44].set(gamma * omega)
    M = M.at[42,45].set(epsilon * omega)
    M = M.at[42,58].set(alpha * omega)
    M = M.at[43,12].set(gamma * omega)
    M = M.at[43,27].set(beta * omega)
    M = M.at[43,31].set(epsilon * omega)
    M = M.at[43,35].set(delta * omega)
    M = M.at[43,39].set(alpha * omega)
    M = M.at[43,42].set(eta)
    M = M.at[43,44].set(beta * omega)
    M = M.at[43,45].set(delta * omega)
    M = M.at[43,59].set(alpha * omega)
    M = M.at[44,28].set(beta)
    M = M.at[44,32].set(epsilon * omega)
    M = M.at[44,36].set(delta * omega)
    M = M.at[44,40].set(alpha * omega)
    M = M.at[44,42].set(gamma * omega)
    M = M.at[44,43].set(beta * omega)
    M = M.at[44,45].set(alpha)
    M = M.at[44,60].set(alpha * omega)
    M = M.at[45,13].set(gamma * omega)
    M = M.at[45,29].set(beta)
    M = M.at[45,33].set(epsilon * omega)
    M = M.at[45,37].set(delta * omega)
    M = M.at[45,41].set(alpha * omega)
    M = M.at[45,42].set(epsilon * omega)
    M = M.at[45,43].set(delta * omega)
    M = M.at[45,44].set(alpha)
    M = M.at[45,61].set(alpha * omega)
    M = M.at[46,1].set(epsilon * omega)
    M = M.at[46,14].set(delta * omega)
    M = M.at[46,30].set(alpha * omega)
    M = M.at[46,47].set(eta)
    M = M.at[46,48].set(gamma)
    M = M.at[46,49].set(epsilon)
    M = M.at[46,50].set(eta * omega)
    M = M.at[46,54].set(gamma * omega)
    M = M.at[46,58].set(epsilon * omega)
    M = M.at[47,2].set(epsilon * omega)
    M = M.at[47,15].set(delta * omega)
    M = M.at[47,31].set(alpha * omega)
    M = M.at[47,46].set(eta)
    M = M.at[47,48].set(beta)
    M = M.at[47,49].set(delta)
    M = M.at[47,51].set(eta * omega)
    M = M.at[47,55].set(gamma * omega)
    M = M.at[47,59].set(epsilon * omega)
    M = M.at[48,3].set(epsilon * omega)
    M = M.at[48,16].set(delta * omega)
    M = M.at[48,32].set(alpha * omega)
    M = M.at[48,46].set(gamma)
    M = M.at[48,47].set(beta)
    M = M.at[48,49].set(alpha)
    M = M.at[48,52].set(eta * omega)
    M = M.at[48,56].set(gamma * omega)
    M = M.at[48,60].set(epsilon * omega)
    M = M.at[49,4].set(epsilon * omega)
    M = M.at[49,17].set(delta * omega)
    M = M.at[49,33].set(alpha * omega)
    M = M.at[49,46].set(epsilon)
    M = M.at[49,47].set(delta)
    M = M.at[49,48].set(alpha)
    M = M.at[49,53].set(eta * omega)
    M = M.at[49,57].set(gamma * omega)
    M = M.at[49,61].set(epsilon * omega)
    M = M.at[50,5].set(epsilon * omega)
    M = M.at[50,18].set(delta * omega)
    M = M.at[50,34].set(alpha * omega)
    M = M.at[50,46].set(eta * omega)
    M = M.at[50,51].set(eta)
    M = M.at[50,52].set(gamma)
    M = M.at[50,53].set(epsilon)
    M = M.at[50,54].set(beta * omega)
    M = M.at[50,58].set(delta * omega)
    M = M.at[51,6].set(epsilon * omega)
    M = M.at[51,19].set(delta * omega)
    M = M.at[51,35].set(alpha * omega)
    M = M.at[51,47].set(eta * omega)
    M = M.at[51,50].set(eta)
    M = M.at[51,52].set(beta)
    M = M.at[51,53].set(delta)
    M = M.at[51,55].set(beta * omega)
    M = M.at[51,59].set(delta * omega)
    M = M.at[52,7].set(epsilon * omega)
    M = M.at[52,20].set(delta * omega)
    M = M.at[52,36].set(alpha * omega)
    M = M.at[52,48].set(eta * omega)
    M = M.at[52,50].set(gamma)
    M = M.at[52,51].set(beta)
    M = M.at[52,53].set(alpha)
    M = M.at[52,56].set(beta * omega)
    M = M.at[52,60].set(delta * omega)
    M = M.at[53,8].set(epsilon * omega)
    M = M.at[53,21].set(delta * omega)
    M = M.at[53,37].set(alpha * omega)
    M = M.at[53,49].set(eta * omega)
    M = M.at[53,50].set(epsilon)
    M = M.at[53,51].set(delta)
    M = M.at[53,52].set(alpha)
    M = M.at[53,57].set(beta * omega)
    M = M.at[53,61].set(delta * omega)
    M = M.at[54,9].set(epsilon * omega)
    M = M.at[54,22].set(delta * omega)
    M = M.at[54,38].set(alpha * omega)
    M = M.at[54,46].set(gamma * omega)
    M = M.at[54,50].set(beta * omega)
    M = M.at[54,55].set(eta)
    M = M.at[54,56].set(gamma * omega)
    M = M.at[54,57].set(epsilon * omega)
    M = M.at[54,58].set(alpha * omega)
    M = M.at[55,10].set(epsilon * omega)
    M = M.at[55,23].set(delta * omega)
    M = M.at[55,39].set(alpha * omega)
    M = M.at[55,47].set(gamma * omega)
    M = M.at[55,51].set(beta * omega)
    M = M.at[55,54].set(eta)
    M = M.at[55,56].set(beta * omega)
    M = M.at[55,57].set(delta * omega)
    M = M.at[55,59].set(alpha * omega)
    M = M.at[56,24].set(delta * omega)
    M = M.at[56,40].set(alpha * omega)
    M = M.at[56,48].set(gamma * omega)
    M = M.at[56,52].set(beta * omega)
    M = M.at[56,54].set(gamma * omega)
    M = M.at[56,55].set(beta * omega)
    M = M.at[56,57].set(alpha)
    M = M.at[56,60].set(alpha * omega)
    M = M.at[57,25].set(delta * omega)
    M = M.at[57,41].set(alpha * omega)
    M = M.at[57,49].set(gamma * omega)
    M = M.at[57,53].set(beta * omega)
    M = M.at[57,54].set(epsilon * omega)
    M = M.at[57,55].set(delta * omega)
    M = M.at[57,56].set(alpha)
    M = M.at[57,61].set(alpha * omega)
    M = M.at[58,11].set(epsilon * omega)
    M = M.at[58,26].set(delta * omega)
    M = M.at[58,42].set(alpha * omega)
    M = M.at[58,46].set(epsilon * omega)
    M = M.at[58,50].set(delta * omega)
    M = M.at[58,54].set(alpha * omega)
    M = M.at[58,59].set(eta)
    M = M.at[58,60].set(gamma)
    M = M.at[58,61].set(epsilon)
    M = M.at[59,12].set(epsilon * omega)
    M = M.at[59,27].set(delta * omega)
    M = M.at[59,43].set(alpha * omega)
    M = M.at[59,47].set(epsilon * omega)
    M = M.at[59,51].set(delta * omega)
    M = M.at[59,55].set(alpha * omega)
    M = M.at[59,58].set(eta)
    M = M.at[59,60].set(beta)
    M = M.at[59,61].set(delta)
    M = M.at[60,28].set(delta * omega)
    M = M.at[60,44].set(alpha * omega)
    M = M.at[60,48].set(epsilon * omega)
    M = M.at[60,52].set(delta * omega)
    M = M.at[60,56].set(alpha * omega)
    M = M.at[60,58].set(gamma)
    M = M.at[60,59].set(beta)
    M = M.at[60,61].set(alpha)
    M = M.at[61,13].set(epsilon * omega)
    M = M.at[61,29].set(delta * omega)
    M = M.at[61,45].set(alpha * omega)
    M = M.at[61,49].set(epsilon * omega)
    M = M.at[61,53].set(delta * omega)
    M = M.at[61,57].set(alpha * omega)
    M = M.at[61,58].set(epsilon)
    M = M.at[61,59].set(delta)
    M = M.at[61,60].set(alpha)

    M = jnp.matmul(jnp.matmul(M, pimat).T, pimat).T

    # Compute the diagonal
    index = jnp.arange(0, 61, 1, jnp.uint16)
    # check https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.fori_loop.html
    for i in range(61):
        # M = M.at[i, i].set(-jnp.dot(M[i, :], pimult[i, :]))
        M = M.at[i, i].set(-jnp.dot(jnp.take(M, index), jnp.take(pimult, index)))
        index += 61 # or use lax.slice?

    return M

def transforms(X, pi_eq):
    N = np.sum(X, 0)

    # pi transforms
    lp = np.array(np.log(pi_eq))
    pimat = np.diag(np.sqrt(pi_eq))
    pimatinv = np.diag(np.divide(1, np.sqrt(pi_eq)))

    pimult = np.array((61, 61))
    for j in range(61):
        for i in range(61):
            pimult[i, j] = np.sqrt(pi_eq[j] / pi_eq[i])


    # These may need to be 3D tensors, or some other transform may be better here
    obs_mat = []
    obs_vec = []
    l = X.shape()[0]
    for i in range(l):
        obs_mat.append(np.broadcast_to(X[i, :], (61, 61)))
        obs_vec.append(X[i, :])

    return N, l, lp, pimat, pimatinv, pimult, obs_mat, obs_vec

def likelihood(obs_vec, obs_mat, N, l, theta, omega, pi_eq, lp, pimat, pimult,
               pimatinv, alpha, beta, gamma, delta, epsilon, eta):

    # Calculate substitution rate matrix under neutrality
    A = build_GTR(alpha, beta, gamma, delta, epsilon, eta, 1, pimat, pimult)

    meanrate = -jnp.dot(jnp.diagonal(A), pi_eq)
    #meanrate = 0
    #for i in range(61):
    #    meanrate -= pi_eq[i] * A.at[i, i].get()

    # Calculate substitution rate matrix
    scale = (theta / 2.0) / meanrate
    # TODO replace this with build_GTR/update_GTR
    mutmat = build_GTR(alpha, beta, gamma, delta, epsilon, eta, omega, pimat, pimult)

    V, Ve = jnp.linalg.eig(mutmat)
    E = 1 / (1 - 2 * scale * Ve)
    V_inv = jnp.matmul(V, jnp.diag(E))

    # Create m_AB for each ancestral codon
    m_AB = jnp.zeros((61, 61))
    index = jnp.arange(0, 61, 1, jnp.uint16)
    #sqp = jnp.sqrt(pi_eq)
    for i in range(61):
        # Va = rep_matrix(row(V, i), 61);
        Va = jnp.reshape(jnp.repeat(jnp.take(V, index), 61), (61, 61)) # Not sure if this is repeat or tile
        index += 61
        # m_AB[i, ] = to_row_vector(rows_dot_product(Va, V_inv));
        # Possible with jax.vmap?
        # row_sum_fn = jax.vmap(lambda x, y: jnp.vdot(x, y), (1, 1), 0)
        row = jnp.einsum('ij,ij->i', Va, V_inv)
        # If using option 1 below
        # row = jnp.divide(row, sqp.at[i].get())
        dynamic_update_slice_in_dim(m_AB, row, i, 0)

    # Add equilibrium frequencies (option 1)
    #for i in range(61):
    #    col = jnp.multiply(dynamic_slice_in_dim(m_AB, (0, i), 61), sqp.at[i].get())
    #    dynamic_update_slice_in_dim(m_AB, col, i, 1)

    # Add equilibrium frequencies (option 2)
    m_AB = jnp.matmul(jnp.matmul(m_AB.T, pimatinv).T, pimat)

    # Normalise by m_AA
    m_AA = jnp.reshape(jnp.repeat(jnp.diag(m_AB), 61), (61, 61)) # Creates matrix with diagonals copied along each row
    m_AB = jnp.maximum(jnp.divide(m_AB, m_AA) - jnp.eye(61, 61), 1.0e-06) # Makes min value 1e-6 (and sets diagonal, as -I makes this 0)

    # Original C
    # for(i in 1:61){
    #     m_AA = m_AB[i, i];
    #     for(j in 1:61){
    #     if(j != i){
    #         m_AB[i, j] /= m_AA;
    #     }
    #     if(m_AB[i, j] < 0){
    #         m_AB[i, j] = 1.0e-06;
    #     }
    #     }
    #     m_AB[i, i] = 1.0e-06;
    # }

    # Likelihood calculation

    # Parts shared over all positions (at least while omega is fixed)
    muti = m_AB + jnp.eye(61, 61)
    lgmuti = lgamma(muti)
    # ttheta = m_AB * ones; # I think this is rowSum()?
    ttheta = jnp.sum(m_AB, 0)
    ltheta = jnp.log(ttheta)
    lgtheta = lgamma(ttheta)

    lik = 0
    for pos in range(l):
        # Calculate parts same for all ancestors
        Np = N.at[pos].get()
        phi = lgamma(Np + 1) - jnp.sum(lgamma(obs_vec.at[pos].get() + 1));

        poslp = lgtheta - lgamma(Np + ttheta) - jnp.log(Np + ttheta) + ltheta;

        gam_mat = lgamma(obs_mat[pos] + muti) - lgmuti

        likposanc = lp
        likposanc += jnp.sum(gam_mat, 0)
        likposanc += poslp + phi

        lik += logsumexp(likposanc)
    return lik









